apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: demo
  labels:
    app: redis
#    namespace: demo
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: redis-server
        image: redis:6.2-alpine
        imagePullPolicy: Always
        ports:
        # - containerPort: 7000
        #   name: intra-node
        # - containerPort: 7001
        #   name: tls-intra-node
        # - containerPort: 7199
        #   name: jmx
        - containerPort: 6379
          name: cql
        resources:
          limits:
            cpu: "200m"
            memory: 200Mi
          requests:
            cpu: "200m"
            memory: 200Mi
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: redis-data
          mountPath: /var/lib/redis
        envFrom:
        - configMapRef:
            name: redis
      volumes:
        - name: redis-data
          persistentVolumeClaim:
             claimName: redis-claim-redis-0
        - name: config
          configMap:
            name: redis
            items:
            - key: redis-config
              path: redis.conf
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: redis-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: redis-storage
      resources:
        requests:
          storage: 200Mi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: redis-storage
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  fstype: ext4
